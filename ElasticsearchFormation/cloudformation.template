{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "AWS CloudFormation Sample Template ELBSample: Create a load balanced sample web site. The AMI is chosen based on the region in which the stack is run. This example creates 2 EC2 instances behind a load balancer with a simple health check. The instances may be created in one or more AZs. The web site is available on port 80, however, the instances can be configured to listen on any port (8888 by default). **WARNING** This template creates one or more Amazon EC2 instances and an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",

  "Parameters" : {
    "InstanceType" : {
      "Description" : "WebServer EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ServerPort" : {
		"Description" : "TCP/IP port for Elasticsearch",
		"Type" : "String",
		"Default" : "9270"
    },
		"AppInstanceCountMin": {
		"Description": "Minimum number of EC2 instances to launch for application AutoScaling Group",
		"Type": "Number",
		"MinValue":"1",
		"Default": "2"
	},
		"AppInstanceCountMax": {
		"Description": "Maximum number of EC2 instances to launch for application AutoScaling Group",
		"Type": "Number",
		"MinValue":"1",
		"Default": "2"
	},
		"AppInstanceCountDesired": {
		"Description": "Desired number of EC2 instances to launch for application AutoScaling Group",
		"Type": "Number",
		"MinValue":"1",
		"Default": "2"
	},
    "KeyName" : {
		"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
		"Type" : "String"
    },
	"SpotPrice":{
		"Description": "Spot price for application AutoScaling Group",
		"Type":"Number",
		"MinValue": "0"
	},
    "AccessKey" : {
		"Description" : "Access key",
		"Type" : "String"
    },
	"SecretKey" : {
		"Description" : "Secret key",
		"Type" : "String"
    }
  },

  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" },
      "m1.small"    : { "Arch" : "64" },
      "m1.medium"   : { "Arch" : "64" },
      "m1.large"    : { "Arch" : "64" },
      "m1.xlarge"   : { "Arch" : "64" },
      "m2.xlarge"   : { "Arch" : "64" },
      "m2.2xlarge"  : { "Arch" : "64" },
      "m3.xlarge"   : { "Arch" : "64" },
      "m3.2xlarge"  : { "Arch" : "64" },
      "m2.4xlarge"  : { "Arch" : "64" },
      "c1.medium"   : { "Arch" : "64" },
      "c1.xlarge"   : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
      "eu-west-1"      : { "64" : "ami-17031f63" }
    }
  },

  "Resources" : {
  "ServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : {"Ref":"AppInstanceCountMin"},
		"MaxSize" : {"Ref":"AppInstanceCountMax"},
		"DesiredCapacity":{"Ref":"AppInstanceCountDesired"},
		"LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
      }
    },

	 "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyName" },
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" },
                                          "Arch" ] } ] },
        "UserData" : { "Fn::Base64" : {"Fn::Join":["",[
			"#!/bin/bash\n",
			"sed -i \"s/<access_key>/",
			{"Ref":"AccessKey"},
			"/g\"  /etc/elasticsearch/elasticsearch.yml\n",
			"sed -i \"s/<secret_key>/",
			{"Ref":"SecretKey"},
			"/g\"  /etc/elasticsearch/elasticsearch.yml\n",
			"/etc/init.d/elasticsearch restart\n"
		]]}},
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : { "Ref" : "InstanceType" },
		"SpotPrice": {"Ref":"SpotPrice"}
      }
    },

    "ElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "Listeners" : [ {
          "LoadBalancerPort" : { "Ref" : "ServerPort" },
          "InstancePort" : { "Ref" : "ServerPort" },
          "Protocol" : "HTTP"
        } ],
        "HealthCheck" : {
          "Target" : { "Fn::Join" : [ "", ["HTTP:", { "Ref" : "ServerPort" }, "/"]]},
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "6",
          "Timeout" : "5"
        }
      }
    },

	"WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "ServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "ServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access and HTTP access on the inbound port",
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : "0.0.0.0/0"
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : { "Ref" : "ServerPort" },
          "ToPort" : { "Ref" : "ServerPort" },
          "CidrIp" : "0.0.0.0/0"
        },
		{
			"IpProtocol":"icmp",
			"FromPort" : "-1",
			"ToPort" : "-1",
			"SourceSecurityGroupName":"default"
		},
		{
			"IpProtocol":"tcp",
			"FromPort" : "0",
			"ToPort" : "65535",
			"SourceSecurityGroupName":"default"
		}
		]
      }
    }
  },

  "Outputs" : {
    "URL" : {
      "Description" : "URL of the elasticsearch load balancer",
      "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]},":", { "Ref" : "ServerPort" }]]}
    }
  }
}
